/*
 * Copyright 2022 Readium Foundation. All rights reserved.
 * Use of this source code is governed by the BSD-style license
 * available in the top-level LICENSE file of the project.
 */

@file:Suppress("FunctionName")

package org.readium.r2.navigator.settings

import org.readium.r2.shared.ExperimentalReadiumApi
import org.readium.r2.shared.util.Either
import org.readium.r2.shared.util.IdentityValueCoder
import org.readium.r2.shared.util.ValueCoder
import java.text.NumberFormat

/**
 * Represents a single configurable property of a [Configurable] component and holds its current
 * [value].
 *
 * @param key Unique identifier used to serialize [Preferences] to JSON.
 * @param coder [ValueCoder] used to convert the [value] from and to its JSON representation [R].
 * @param value Current value for this setting.
 * @param extras Holds additional metadata specific to this setting type.
 * @param validator Ensures the validity of a [V] value.
 * @param activator Ensures that the condition required for this setting to be active are met in the
 * given [Preferences] â€“ e.g. another setting having a certain preference.
 */
@ExperimentalReadiumApi
data class Setting<V, R, E>(
    val key: String,
    val coder: ValueCoder<V?, R?>,
    val value: V,
    val extras: E,
    private val validator: SettingValidator<V> = IdentitySettingValidator(),
    private val activator: SettingActivator = NullSettingActivator
) : SettingValidator<V> by validator, SettingActivator by activator, ValueCoder<V?, R?> by coder {

    companion object {
        // Official setting keys.
        const val COLUMN_COUNT = "columnCount"
        const val FIT = "fit"
        const val FONT = "font"
        const val FONT_SIZE = "fontSize"
        const val ORIENTATION = "orientation"
        const val OVERFLOW = "overflow"
        const val PUBLISHER_STYLES = "publisherStyles"
        const val READING_PROGRESSION = "readingProgression"
        const val THEME = "theme"
        const val WORD_SPACING = "wordSpacing"
    }

    /**
     * JSON raw representation for the current value.
     */
    val encodedValue: R? = coder.encode(this.value)

    /**
     * Creates a copy of the [Setting] receiver, after replacing its value with the first valid
     * value taken from the given [Preferences] objects, in order.
     *
     * Each preference is verified using the setting [validator].
     */
    fun copyFirstValidValueFrom(vararg candidates: Preferences?): Setting<V, R, E> =
        copyFirstValidValueFrom(*candidates
            .filterNotNull()
            .map { Either.Left<Preferences, V>(it) }
            .toTypedArray()
        )

    // FIXME: Useful or not?
    private fun copyFirstValidValueFrom(vararg candidates: Either<Preferences, V>?): Setting<V, R, E> =
        copy(
            value = candidates
                .filterNotNull()
                .mapNotNull { candidate ->
                    when (candidate) {
                        is Either.Left -> candidate.value[this]
                        is Either.Right -> candidate.value
                    }
                }
                .firstNotNullOfOrNull(::validate)
                ?: value
        )

    // We only want to use the setting key and value to test the structural equality, so we
    // override the default implementation generated by the data class.

    override fun equals(other: Any?): Boolean {
        val otherSetting = (other as? Setting<*, *, *>) ?: return false
        return otherSetting.key == key && otherSetting.encodedValue == encodedValue
    }

    override fun hashCode(): Int {
        var result = key.hashCode()
        result = 31 * result + (encodedValue?.hashCode() ?: 0)
        return result
    }
}

/**
 * A boolean [Setting].
 */
@ExperimentalReadiumApi
typealias ToggleSetting = Setting<Boolean, Boolean, Unit>

/**
 * Creates a new [ToggleSetting] with the given [value].
 */
@ExperimentalReadiumApi
fun ToggleSetting(
    key: String,
    value: Boolean,
    validator: SettingValidator<Boolean> = IdentitySettingValidator(),
    activator: SettingActivator = NullSettingActivator,
) : ToggleSetting =
    Setting(
        key = key, coder = IdentityValueCoder(Boolean::class), value = value, extras = Unit,
        validator = validator, activator = activator
    )

/**
 * A [Setting] whose value is constrained to a range.
 */
@ExperimentalReadiumApi
typealias RangeSetting<V> = Setting<V, V, RangeExtras<V>>

/**
 * Additional metadata associated with a [RangeSetting].
 */
@ExperimentalReadiumApi
data class RangeExtras<V : Comparable<V>>(
    val range: ClosedRange<V>,
    val suggestedSteps: List<V>?,
    val label: (V) -> String,
)

/**
 * Creates a new [RangeSetting] with the given [value].
 *
 * @param range The valid range for the setting value.
 * @param suggestedSteps Value steps which can be used to decrement or increment the setting.
 * @param label Returns a user-facing label for the given value. This can be used to format the
 * value unit.
 */
@ExperimentalReadiumApi
inline fun <reified V : Comparable<V>> RangeSetting(
    key: String,
    value: V,
    range: ClosedRange<V>,
    suggestedSteps: List<V>? = null,
    noinline label: (V) -> String = { it.toString() },
    validator: SettingValidator<V> = IdentitySettingValidator(),
    activator: SettingActivator = NullSettingActivator,
) : RangeSetting<V> =
    Setting(
        key = key, coder = IdentityValueCoder(V::class), value = value,
        extras = RangeExtras(
            range = range,
            suggestedSteps = suggestedSteps,
            label = label
        ),
        validator = RangeSettingValidator(range) then validator,
        activator = activator
    )

/**
 * Returns a user-facing label for the given [RangeSetting] value.
 */
@ExperimentalReadiumApi
fun <V : Comparable<V>> RangeSetting<V>.label(value: V): String =
    extras.label(value)

/**
 * A [RangeSetting] representing a percentage from 0.0 to 1.0.
 */
@ExperimentalReadiumApi
typealias PercentSetting = Setting<Double, Double, RangeExtras<Double>>

/**
 * Creates a new [PercentSetting] with the given [value].
 *
 * @param range The valid range for the setting value.
 * @param suggestedSteps Value steps which can be used to decrement or increment the setting.
 */
@ExperimentalReadiumApi
fun PercentSetting(
    key: String,
    value: Double,
    range: ClosedRange<Double> = 0.0..1.0,
    suggestedSteps: List<Double>? = null,
    validator: SettingValidator<Double> = IdentitySettingValidator(),
    activator: SettingActivator = NullSettingActivator
) : PercentSetting =
    RangeSetting(
        key = key, value = value, range = range, suggestedSteps = suggestedSteps,
        label = { v ->
            NumberFormat.getPercentInstance().run {
                maximumFractionDigits = 0
                format(v)
            }
        },
        validator = validator, activator = activator
    )

/**
 * A [Setting] whose value is a member of the enum [E].
 */
@ExperimentalReadiumApi
typealias EnumSetting<E> = Setting<E, String, EnumExtras<E>>

/**
 * Additional metadata associated with an [EnumSetting].
 */
@ExperimentalReadiumApi
data class EnumExtras<E>(
    val values: List<E>,
    val label: (E) -> String?,
)

/**
 * Creates a new [EnumSetting] with the given [value].
 *
 * @param values List of valid [E] values for this setting. Not all members of the enum are
 * necessary supported.
 * @param label Returns a user-facing label for the given value, when one is available.
 */
@ExperimentalReadiumApi
fun <E> EnumSetting(
    key: String,
    coder: ValueCoder<E?, String?>,
    value: E,
    values: List<E>,
    label: (E) -> String? = { null },
    validator: SettingValidator<E> = IdentitySettingValidator(),
    activator: SettingActivator = NullSettingActivator,
) : EnumSetting<E> =
    Setting(
        key = key, value = value, coder = coder,
        extras = EnumExtras(
            values = values,
            label = label
        ),
        validator = AllowlistSettingValidator(values) then validator,
        activator = activator
    )

/**
 * List of valid [E] values for this setting. Not all members of the enum are necessary supported.
 */
@ExperimentalReadiumApi
val <E> EnumSetting<E>.values: List<E>
    get() = extras.values

/**
 * Returns a user-facing label for the given [value], when one is available.
 */
@ExperimentalReadiumApi
fun <E> EnumSetting<E>.label(value: E): String? =
    extras.label(value)
